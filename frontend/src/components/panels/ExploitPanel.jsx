import React, { useState, useEffect, useRef } from 'react';
import { FiPlus, FiEdit2, FiTrash2, FiSave, FiX } from 'react-icons/fi';
import { useToast } from '../providers/ToastProvider.jsx';

// Exploit techniques management panel (extracted from monolithic main.jsx)
export default function ExploitPanel({ token }){
  const [techniques, setTechniques] = useState([]);
  const [selected, setSelected] = useState(null);
  const [me,setMe] = useState(null);
  const [editing,setEditing] = useState(false);
  const [form,setForm] = useState({ id:'', category:'', name:'', description:'', template:'' });
  const toast = useToast();

  function load(){ fetch('http://localhost:4000/api/techniques').then(r=>r.json()).then(d=>{ setTechniques(d.techniques||[]); try { const want = localStorage.getItem('ti_select_tech_id'); if(want){ const match = (d.techniques||[]).find(t=> String(t.id)===want); if(match){ setSelected(match); } localStorage.removeItem('ti_select_tech_id'); } } catch {} }); }
  useEffect(()=>{ if(token) load(); },[token]);
  useEffect(()=>{ if(token) fetch('http://localhost:4000/api/auth/me',{ headers:{ Authorization:'Bearer '+token }}).then(r=>r.json()).then(setMe).catch(()=>{}); },[token]);
  const isAdmin = me?.role==='admin';

  function startNew(){ setForm({ id:'', category:'', name:'', description:'', template:'' }); setEditing(true); setSelected(null); }
  function startEdit(){ if(!selected) return; setForm(selected); setEditing(true); }
  async function save(){
    if(!form.name || !form.category) return;
    const body = JSON.stringify({ category:form.category, name:form.name, description:form.description, template:form.template });
    try {
      if(form.id){
        await fetch(`http://localhost:4000/api/techniques/${form.id}`, { method:'PUT', headers:{'Content-Type':'application/json', Authorization:'Bearer '+token}, body });
        toast.success('Technique updated');
      } else {
        const res = await fetch('http://localhost:4000/api/techniques', { method:'POST', headers:{'Content-Type':'application/json', Authorization:'Bearer '+token}, body });
        const data = await res.json(); if(data.technique) { setSelected(data.technique); toast.success('Technique created'); }
      }
      setEditing(false); load();
    } catch(e){ toast.error(e.message); }
  }
  async function remove(){ if(!selected) return; if(!confirm('Delete technique?')) return; await fetch(`http://localhost:4000/api/techniques/${selected.id}`, { method:'DELETE', headers:{ Authorization:'Bearer '+token }}); setSelected(null); load(); toast.info('Technique deleted'); }
  function cancel(){ setEditing(false); if(form.id){ setSelected(form); } }

  return <div className="split">
    <div className="tech-pane">
      <div style={{display:'flex', justifyContent:'space-between', alignItems:'center'}}>
        <div className="section-label">TECHNIQUES</div>
        {isAdmin && <button className="btn" style={{padding:'6px 10px', fontSize:'.6rem'}} onClick={startNew}><FiPlus/> New</button>}
      </div>
      <div className="tech-list">
        {techniques.map(t => <div key={t.id} className={"tech-item "+(selected?.id===t.id?'selected':'')} onClick={()=>{ setSelected(t); setEditing(false); }}>{t.category}: {t.name}</div>)}
      </div>
    </div>
    <div style={{flex:1, position:'relative'}}>
      {editing ? <div className="card fade-in" style={{height:'100%', overflow:'auto'}}>
        <h3 style={{marginTop:0, display:'flex', alignItems:'center', gap:8}}>{form.id? <><FiEdit2/> Edit Technique</> : <><FiPlus/> New Technique</>}</h3>
        <div className="flex-col" style={{gap:10, maxWidth:680}}>
          <input placeholder="Category" value={form.category} onChange={e=>setForm(f=>({...f, category:e.target.value}))} />
          <input placeholder="Name" value={form.name} onChange={e=>setForm(f=>({...f, name:e.target.value}))} />
          <textarea rows={4} placeholder="Description" value={form.description} onChange={e=>setForm(f=>({...f, description:e.target.value}))} />
          <textarea rows={10} placeholder="Template code" value={form.template} onChange={e=>setForm(f=>({...f, template:e.target.value}))} style={{fontFamily:'var(--mono)'}} />
          <div style={{display:'flex', gap:8}}>
            <button className="btn accent" onClick={save}><FiSave/> Save</button>
            <button className="btn" onClick={cancel}><FiX/> Cancel</button>
          </div>
        </div>
      </div> : selected ? <TechniqueDetail t={selected} isAdmin={isAdmin} startEdit={startEdit} remove={remove}/> : <div className="card card-glow"><h3 style={{marginTop:0}}>Select a technique</h3><p>Browse or create techniques (admins can add / edit).</p></div>}
    </div>
  </div>;
}

function TechniqueDetail({t, isAdmin, startEdit, remove}){
  return <div className="card fade-in" style={{height:'100%', overflow:'auto', position:'relative'}}>
    <div style={{display:'flex', justifyContent:'space-between', alignItems:'flex-start', gap:16}}>
      <div>
        <h2 style={{margin:'0 0 4px'}}>{t.name}</h2>
        <div style={{fontSize:'.6rem', letterSpacing:'.5px', color:'var(--text-dim)', marginBottom:10}}>{t.category}</div>
      </div>
      {isAdmin && <div style={{display:'flex', gap:8}}>
        <button className="btn" style={{padding:'6px 10px', fontSize:'.6rem'}} onClick={startEdit}><FiEdit2/> Edit</button>
        <button className="btn danger" style={{padding:'6px 10px', fontSize:'.6rem'}} onClick={remove}><FiTrash2/> Delete</button>
      </div>}
    </div>
    <p style={{whiteSpace:'pre-wrap'}}>{t.description}</p>
    <div className="section-label" style={{margin:'18px 0 6px'}}>TEMPLATE</div>
    <pre>{t.template}</pre>
    {isAdmin && <StatusModeration t={t} />}
    {isAdmin && <VersionHistory technique={t} />}
  </div>;
}

function StatusModeration({ t }){
  const [status,setStatus] = useState(t.status||'published');
  const tokenRef = useRef(localStorage.getItem('ti_jwt'));
  async function updateStatus(s){ setStatus(s); try { await fetch(`http://localhost:4000/api/techniques/${t.id}/status`, { method:'PATCH', headers:{'Content-Type':'application/json', Authorization:'Bearer '+tokenRef.current}, body: JSON.stringify({ status: s }) }); } catch {} }
  return <div style={{marginTop:12}}>
    <div className="section-label" style={{marginBottom:4}}>STATUS</div>
    <div style={{display:'flex', gap:6}}>
      {['published','draft','archived'].map(s=> <button key={s} className={'btn '+(status===s?'accent':'')} style={{padding:'4px 10px', fontSize:'.55rem'}} onClick={()=>updateStatus(s)}>{s}</button>)}
    </div>
  </div>;
}

function VersionHistory({ technique }){
  const [versions,setVersions] = useState([]);
  const tokenRef = useRef(null);
  useEffect(()=>{ (async()=>{ try { const storedToken = localStorage.getItem('ti_jwt') || localStorage.getItem('ti_token') || localStorage.getItem('token') || sessionStorage.getItem('ti_jwt'); tokenRef.current = storedToken; const r = await fetch(`http://localhost:4000/api/techniques/${technique.id}/versions`, { headers:{ Authorization:'Bearer '+storedToken }}); if(r.ok){ const data = await r.json(); const list = (data.versions||[]).map(v=>({...v})); setVersions(list.reverse()); } } catch {} })(); }, [technique.id]);
  async function revert(i){ if(!confirm('Revert to this version? A snapshot of the current version will be kept.')) return; const originalIndex = versions.length - 1 - i; const r = await fetch(`http://localhost:4000/api/techniques/${technique.id}/revert`, { method:'POST', headers:{'Content-Type':'application/json', Authorization:'Bearer '+(tokenRef.current||'')}, body: JSON.stringify({ index: originalIndex }) }); if(r.ok){ location.reload(); } }
  if(!versions.length) return <div style={{marginTop:18, fontSize:'.6rem', color:'var(--text-dim)'}}>No prior versions.</div>;
  return <div style={{marginTop:22}}>
    <div className="section-label" style={{marginBottom:6}}>VERSIONS</div>
    <div style={{display:'flex', flexDirection:'column', gap:6}}>
      {versions.map((v,i)=>(
        <div key={i} style={{display:'flex', justifyContent:'space-between', alignItems:'center', background:'var(--bg-alt)', border:'1px solid var(--border)', padding:'6px 10px', borderRadius:6}}>
          <div style={{fontSize:'.55rem', letterSpacing:'.5px', color:'var(--text-dim)'}}>{new Date(v.ts).toLocaleString()}</div>
          <button className="btn" style={{padding:'4px 8px', fontSize:'.55rem'}} onClick={()=>revert(i)}>Revert</button>
        </div>
      ))}
    </div>
  </div>;
}
